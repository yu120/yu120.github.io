{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{365:function(v,_,t){\"use strict\";t.r(_);var a=t(43),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"异常集合\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异常集合\"}},[v._v(\"#\")]),v._v(\" 异常集合\")]),v._v(\" \"),t(\"h2\",{attrs:{id:\"并发特性1\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并发特性1\"}},[v._v(\"#\")]),v._v(\" 并发特性1\")]),v._v(\" \"),t(\"p\",[v._v(\"JAVA里面进行多线程通信的主要方式就是 \"),t(\"code\",[v._v(\"共享内存\")]),v._v(\" 的方式，共享内存主要的关注点有两个：\"),t(\"code\",[v._v(\"可见性\")]),v._v(\" 和 \"),t(\"code\",[v._v(\"有序性\")]),v._v(\"。加上复合操作的 \"),t(\"code\",[v._v(\"原子性\")]),v._v(\"，可以认为JAVA的线程安全性问题主要关注点有3个（JAVA内存模型JMM解决了可见性和有序性的问题，而锁解决了原子性的问题）：\"),t(\"code\",[v._v(\"可见性\")]),v._v(\"、\"),t(\"code\",[v._v(\"有序性\")]),v._v(\"、\"),t(\"code\",[v._v(\"原子性\")])]),v._v(\" \"),t(\"h3\",{attrs:{id:\"原子性-atomicity\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原子性-atomicity\"}},[v._v(\"#\")]),v._v(\" 原子性（Atomicity）\")]),v._v(\" \"),t(\"p\",[v._v(\"在Java中原子性指的是一个或多个操作要么全部执行成功要么全部执行失败\")]),v._v(\" \"),t(\"h3\",{attrs:{id:\"有序性-ordering\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#有序性-ordering\"}},[v._v(\"#\")]),v._v(\" \"),t(\"strong\",[v._v(\"有序性（Ordering）\")])]),v._v(\" \"),t(\"p\",[v._v(\"程序执行的顺序按照代码的先后顺序执行（处理器可能会对指令进行重排序）\")]),v._v(\" \"),t(\"h4\",{attrs:{id:\"顶顶顶顶\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#顶顶顶顶\"}},[v._v(\"#\")]),v._v(\" 顶顶顶顶\")]),v._v(\" \"),t(\"h4\",{attrs:{id:\"灌灌灌灌\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#灌灌灌灌\"}},[v._v(\"#\")]),v._v(\" 灌灌灌灌\")]),v._v(\" \"),t(\"h3\",{attrs:{id:\"可见性-visibility\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可见性-visibility\"}},[v._v(\"#\")]),v._v(\" 可见性（Visibility）\")]),v._v(\" \"),t(\"p\",[v._v(\"指在多线程环境下，当一个线程修改了某一个共享变量的值，其它线程能够立刻知道这个修改\")]),v._v(\" \"),t(\"h2\",{attrs:{id:\"并发特性2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并发特性2\"}},[v._v(\"#\")]),v._v(\" 并发特性2\")]),v._v(\" \"),t(\"p\",[v._v(\"JAVA里面进行多线程通信的主要方式就是 \"),t(\"code\",[v._v(\"共享内存\")]),v._v(\" 的方式，共享内存主要的关注点有两个：\"),t(\"code\",[v._v(\"可见性\")]),v._v(\" 和 \"),t(\"code\",[v._v(\"有序性\")]),v._v(\"。加上复合操作的 \"),t(\"code\",[v._v(\"原子性\")]),v._v(\"，可以认为JAVA的线程安全性问题主要关注点有3个（JAVA内存模型JMM解决了可见性和有序性的问题，而锁解决了原子性的问题）：\"),t(\"code\",[v._v(\"可见性\")]),v._v(\"、\"),t(\"code\",[v._v(\"有序性\")]),v._v(\"、\"),t(\"code\",[v._v(\"原子性\")])]),v._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[v._v(\"原子性（Atomicity）\")]),v._v(\"：在Java中原子性指的是一个或多个操作要么全部执行成功要么全部执行失败\")]),v._v(\" \"),t(\"li\",[t(\"strong\",[v._v(\"有序性（Ordering）\")]),v._v(\"：程序执行的顺序按照代码的先后顺序执行（处理器可能会对指令进行重排序）\")]),v._v(\" \"),t(\"li\",[t(\"strong\",[v._v(\"可见性（Visibility）\")]),v._v(\"：指在多线程环境下，当一个线程修\")])]),v._v(\" \"),t(\"h1\",{attrs:{id:\"性能测试\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#性能测试\"}},[v._v(\"#\")]),v._v(\" 性能测试\")]),v._v(\" \"),t(\"h2\",{attrs:{id:\"并发特性3\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并发特性3\"}},[v._v(\"#\")]),v._v(\" 并发特性3\")]),v._v(\" \"),t(\"p\",[v._v(\"JAVA里面进行多线程通信的主要方式就是 \"),t(\"code\",[v._v(\"共享内存\")]),v._v(\" 的方式，共享内存主要的关注点有两个：\"),t(\"code\",[v._v(\"可见性\")]),v._v(\" 和 \"),t(\"code\",[v._v(\"有序性\")]),v._v(\"。加上复合操作的 \"),t(\"code\",[v._v(\"原子性\")]),v._v(\"，可以认为JAVA的线程安全性问题主要关注点有3个（JAVA内存模型JMM解决了可见性和有序性的问题，而锁解决了原子性的问题）：\"),t(\"code\",[v._v(\"可见性\")]),v._v(\"、\"),t(\"code\",[v._v(\"有序性\")]),v._v(\"、\"),t(\"code\",[v._v(\"原子性\")])]),v._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[v._v(\"原子性（Atomicity）\")]),v._v(\"：在Java中原子性指的是一个或多个操作要么全部执行成功要么全部执行失败\")]),v._v(\" \"),t(\"li\",[t(\"strong\",[v._v(\"有序性（Ordering）\")]),v._v(\"：程序执行的顺序按照代码的先后顺序执行（处理器可能会对指令进行重排序）\")]),v._v(\" \"),t(\"li\",[t(\"strong\",[v._v(\"可见性（Visibility）\")]),v._v(\"：指在多线程环境下，当一个线程修改了某一个共享变量的值，其它线程能够立刻知道这个修改\")])]),v._v(\" \"),t(\"h2\",{attrs:{id:\"并发特性4\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并发特性4\"}},[v._v(\"#\")]),v._v(\" 并发特性4\")]),v._v(\" \"),t(\"p\",[v._v(\"JAVA里面进行多线程通信的主要方式就是 \"),t(\"code\",[v._v(\"共享内存\")]),v._v(\" 的方式，共享内存主要的关注点有两个：\"),t(\"code\",[v._v(\"可见性\")]),v._v(\" 和 \"),t(\"code\",[v._v(\"有序性\")]),v._v(\"。加上复合操作的 \"),t(\"code\",[v._v(\"原子性\")]),v._v(\"，可以认为JAVA的线程安全性问题主要关注点有3个（JAVA内存模型JMM解决了可见性和有序性的问题，而锁解决了原子性的问题）：\"),t(\"code\",[v._v(\"可见性\")]),v._v(\"、\"),t(\"code\",[v._v(\"有序性\")]),v._v(\"、\"),t(\"code\",[v._v(\"原子性\")])]),v._v(\" \"),t(\"ul\",[t(\"li\",[t(\"strong\",[v._v(\"原子性（Atomicity）\")]),v._v(\"：在Java中原子性指的是一个或多个操作要么全部执行成功要么全部执行失败\")]),v._v(\" \"),t(\"li\",[t(\"strong\",[v._v(\"有序性（Ordering）\")]),v._v(\"：程序执行的顺序按照代码的先后顺序执行（处理器可能会对指令进行重排序）\")]),v._v(\" \"),t(\"li\",[t(\"strong\",[v._v(\"可见性（Visibility）\")]),v._v(\"：指在多线程环境下，当一个线程修\")])])])}),[],!1,null,null,null);_.default=r.exports}}]);","extractedComments":[]}